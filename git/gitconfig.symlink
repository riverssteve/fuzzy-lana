[core]
    excludesfile = ~/.gitignore
    editor = /usr/local/bin/vim

[user]
    email = steve@futrli.com
    name = Steve Rivers
    signingkey = 2645CA390FB46823

[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = true
    pager = true

[color "diff"]
    whitespace = red reverse
    old = red
    new = green

[commit]
    gpgsign = true

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

[format]
  pretty = format:%C(blue)%h%C(reset) - %s %C(green)- %an%C(reset) %C(blue)(%ar)%C(reset)

[gpg]
    program = gpg

[help]
    autocorrect = 1

[push]
    default = simple

[status]
    submoduleSummary = true

[alias]
    ls = "branch --list"
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    nicelog = log --oneline --decorate
    co = checkout
    stat = status
    st = status --short
    up = pull --rebase --prune

    lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

    # Delete any branches that have been merged into master
    # See also: https://gist.github.com/robmiller/5133264
    delete-merged-branches = "!git checkout master && git pull --rebase --prune && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    pushup = "git push --set-upstream origin $(git branch-name)"

    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

    # Find the commits that were introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"
    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"
    # As above, but in your difftool
    merge-difftool = "!git difftool `git merge-span ... $1`"

    recap = "log --all --oneline --no-merges --author=steve@futrli.com"
    spring-clean = "!git checkout master && git fetch origin && git pull --rebase && git delete-merged-branches && git clean-merged"
    delete-merged-on-origin = !git branch --all --merged remotes/origin/master | grep --invert-match master | grep --invert-match HEAD | grep \"remotes/origin/\" | cut -d \"/\" -f 3- | xargs -n 1 git push --delete origin
